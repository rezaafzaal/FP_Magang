// Generated by gencpp from file FP_Magang/BS2PC.msg
// DO NOT EDIT!


#ifndef FP_MAGANG_MESSAGE_BS2PC_H
#define FP_MAGANG_MESSAGE_BS2PC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace FP_Magang
{
template <class ContainerAllocator>
struct BS2PC_
{
  typedef BS2PC_<ContainerAllocator> Type;

  BS2PC_()
    : status(0.0)
    , tujuan_x(0.0)
    , tujuan_y(0.0)
    , enc_left(0.0)
    , enc_right(0.0)
    , th(0.0)  {
    }
  BS2PC_(const ContainerAllocator& _alloc)
    : status(0.0)
    , tujuan_x(0.0)
    , tujuan_y(0.0)
    , enc_left(0.0)
    , enc_right(0.0)
    , th(0.0)  {
  (void)_alloc;
    }



   typedef float _status_type;
  _status_type status;

   typedef float _tujuan_x_type;
  _tujuan_x_type tujuan_x;

   typedef float _tujuan_y_type;
  _tujuan_y_type tujuan_y;

   typedef float _enc_left_type;
  _enc_left_type enc_left;

   typedef float _enc_right_type;
  _enc_right_type enc_right;

   typedef float _th_type;
  _th_type th;





  typedef boost::shared_ptr< ::FP_Magang::BS2PC_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::FP_Magang::BS2PC_<ContainerAllocator> const> ConstPtr;

}; // struct BS2PC_

typedef ::FP_Magang::BS2PC_<std::allocator<void> > BS2PC;

typedef boost::shared_ptr< ::FP_Magang::BS2PC > BS2PCPtr;
typedef boost::shared_ptr< ::FP_Magang::BS2PC const> BS2PCConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::FP_Magang::BS2PC_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::FP_Magang::BS2PC_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::FP_Magang::BS2PC_<ContainerAllocator1> & lhs, const ::FP_Magang::BS2PC_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.tujuan_x == rhs.tujuan_x &&
    lhs.tujuan_y == rhs.tujuan_y &&
    lhs.enc_left == rhs.enc_left &&
    lhs.enc_right == rhs.enc_right &&
    lhs.th == rhs.th;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::FP_Magang::BS2PC_<ContainerAllocator1> & lhs, const ::FP_Magang::BS2PC_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace FP_Magang

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::FP_Magang::BS2PC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::FP_Magang::BS2PC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::FP_Magang::BS2PC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::FP_Magang::BS2PC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::FP_Magang::BS2PC_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::FP_Magang::BS2PC_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::FP_Magang::BS2PC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6713ba3a23152bdfb17a6636f933f589";
  }

  static const char* value(const ::FP_Magang::BS2PC_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6713ba3a23152bdfULL;
  static const uint64_t static_value2 = 0xb17a6636f933f589ULL;
};

template<class ContainerAllocator>
struct DataType< ::FP_Magang::BS2PC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "FP_Magang/BS2PC";
  }

  static const char* value(const ::FP_Magang::BS2PC_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::FP_Magang::BS2PC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 status\n"
"float32 tujuan_x\n"
"float32 tujuan_y\n"
"float32 enc_left\n"
"float32 enc_right\n"
"float32 th\n"
;
  }

  static const char* value(const ::FP_Magang::BS2PC_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::FP_Magang::BS2PC_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.tujuan_x);
      stream.next(m.tujuan_y);
      stream.next(m.enc_left);
      stream.next(m.enc_right);
      stream.next(m.th);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BS2PC_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::FP_Magang::BS2PC_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::FP_Magang::BS2PC_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<float>::stream(s, indent + "  ", v.status);
    s << indent << "tujuan_x: ";
    Printer<float>::stream(s, indent + "  ", v.tujuan_x);
    s << indent << "tujuan_y: ";
    Printer<float>::stream(s, indent + "  ", v.tujuan_y);
    s << indent << "enc_left: ";
    Printer<float>::stream(s, indent + "  ", v.enc_left);
    s << indent << "enc_right: ";
    Printer<float>::stream(s, indent + "  ", v.enc_right);
    s << indent << "th: ";
    Printer<float>::stream(s, indent + "  ", v.th);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FP_MAGANG_MESSAGE_BS2PC_H
