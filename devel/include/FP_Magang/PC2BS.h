// Generated by gencpp from file FP_Magang/PC2BS.msg
// DO NOT EDIT!


#ifndef FP_MAGANG_MESSAGE_PC2BS_H
#define FP_MAGANG_MESSAGE_PC2BS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace FP_Magang
{
template <class ContainerAllocator>
struct PC2BS_
{
  typedef PC2BS_<ContainerAllocator> Type;

  PC2BS_()
    : bola_x(0.0)
    , bola_y(0.0)
    , motor1(0.0)
    , motor2(0.0)
    , motor3(0.0)  {
    }
  PC2BS_(const ContainerAllocator& _alloc)
    : bola_x(0.0)
    , bola_y(0.0)
    , motor1(0.0)
    , motor2(0.0)
    , motor3(0.0)  {
  (void)_alloc;
    }



   typedef float _bola_x_type;
  _bola_x_type bola_x;

   typedef float _bola_y_type;
  _bola_y_type bola_y;

   typedef float _motor1_type;
  _motor1_type motor1;

   typedef float _motor2_type;
  _motor2_type motor2;

   typedef float _motor3_type;
  _motor3_type motor3;





  typedef boost::shared_ptr< ::FP_Magang::PC2BS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::FP_Magang::PC2BS_<ContainerAllocator> const> ConstPtr;

}; // struct PC2BS_

typedef ::FP_Magang::PC2BS_<std::allocator<void> > PC2BS;

typedef boost::shared_ptr< ::FP_Magang::PC2BS > PC2BSPtr;
typedef boost::shared_ptr< ::FP_Magang::PC2BS const> PC2BSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::FP_Magang::PC2BS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::FP_Magang::PC2BS_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::FP_Magang::PC2BS_<ContainerAllocator1> & lhs, const ::FP_Magang::PC2BS_<ContainerAllocator2> & rhs)
{
  return lhs.bola_x == rhs.bola_x &&
    lhs.bola_y == rhs.bola_y &&
    lhs.motor1 == rhs.motor1 &&
    lhs.motor2 == rhs.motor2 &&
    lhs.motor3 == rhs.motor3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::FP_Magang::PC2BS_<ContainerAllocator1> & lhs, const ::FP_Magang::PC2BS_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace FP_Magang

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::FP_Magang::PC2BS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::FP_Magang::PC2BS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::FP_Magang::PC2BS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::FP_Magang::PC2BS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::FP_Magang::PC2BS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::FP_Magang::PC2BS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::FP_Magang::PC2BS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "414e07ab141b8d50059180f242899e66";
  }

  static const char* value(const ::FP_Magang::PC2BS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x414e07ab141b8d50ULL;
  static const uint64_t static_value2 = 0x059180f242899e66ULL;
};

template<class ContainerAllocator>
struct DataType< ::FP_Magang::PC2BS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "FP_Magang/PC2BS";
  }

  static const char* value(const ::FP_Magang::PC2BS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::FP_Magang::PC2BS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 bola_x\n"
"float32 bola_y\n"
"float32 motor1\n"
"float32 motor2\n"
"float32 motor3\n"
;
  }

  static const char* value(const ::FP_Magang::PC2BS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::FP_Magang::PC2BS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bola_x);
      stream.next(m.bola_y);
      stream.next(m.motor1);
      stream.next(m.motor2);
      stream.next(m.motor3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PC2BS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::FP_Magang::PC2BS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::FP_Magang::PC2BS_<ContainerAllocator>& v)
  {
    s << indent << "bola_x: ";
    Printer<float>::stream(s, indent + "  ", v.bola_x);
    s << indent << "bola_y: ";
    Printer<float>::stream(s, indent + "  ", v.bola_y);
    s << indent << "motor1: ";
    Printer<float>::stream(s, indent + "  ", v.motor1);
    s << indent << "motor2: ";
    Printer<float>::stream(s, indent + "  ", v.motor2);
    s << indent << "motor3: ";
    Printer<float>::stream(s, indent + "  ", v.motor3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FP_MAGANG_MESSAGE_PC2BS_H
